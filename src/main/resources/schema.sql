DROP TABLE IF EXISTS MPA_RATING CASCADE;
create table IF NOT EXISTS MPA_RATING
(
    MPA_ID int NOT NULL auto_increment,
    NAME   varchar NOT NULL,
    DESCRIPTION varchar NOT NULL,
    constraint MPARATING_PK
        primary key (MPA_ID)
);

DROP TABLE IF EXISTS FILMS CASCADE;
create table IF NOT EXISTS FILMS
(
    FILM_ID      int NOT NULL auto_increment,
    NAME         varchar NOT NULL,
    DESCRIPTION  varchar(200) NOT NULL,
    RELEASE_DATE date NOT NULL,
    DURATION     int NOT NULL,
    MPA_ID       int NOT NULL,
    constraint FILMS_PK
        primary key (FILM_ID),
    constraint FK_MPARATING
        foreign key (MPA_ID) references MPA_RATING (MPA_ID) on delete cascade
);

DROP TABLE IF EXISTS USERS CASCADE;
create table IF NOT EXISTS USERS
(
    USER_ID  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR(100) NOT NULL,
    name     VARCHAR(50)  NOT NULL,
    login    VARCHAR(100) NOT NULL,
    birthday DATE         NOT NULL
);

DROP TABLE IF EXISTS GENRES CASCADE;
create table IF NOT EXISTS GENRES
(
    GENRE_ID int NOT NULL auto_increment,
    NAME     varchar NOT NULL,
    constraint GENRES_PK
        primary key (GENRE_ID)
);
DROP TABLE IF EXISTS FILM_GENRE CASCADE;
create table IF NOT EXISTS FILM_GENRE
(
    FILM_ID  int NOT NULL,
    GENRE_ID int NOT NULL,
    constraint FK_FILMGENRE_FILMID
        foreign key (FILM_ID) references FILMS (FILM_ID)
            on delete cascade,
    constraint FK_FILMGENRE_GENREID
        foreign key (GENRE_ID) references GENRES (GENRE_ID)
);
DROP TABLE IF EXISTS LIKES CASCADE;
create table IF NOT EXISTS LIKES
(
    FILM_ID int NOT NULL,
    USER_ID int NOT NULL,
    constraint FK_LIKES_FILMID
        foreign key (FILM_ID) references FILMS (FILM_ID)
            on delete cascade,
    constraint FK_LIKES_USERID
        foreign key (USER_ID) references USERS (USER_ID) on delete cascade
);
DROP TABLE IF EXISTS FRIENDSHIP CASCADE;
create table IF NOT EXISTS FRIENDSHIP
(
    USER_ID   int NOT NULL,
    FRIEND_ID int NOT NULL,
    STATUS    boolean NOT NULL,
    constraint FK_FRIENDSHIP_FRIENDID
        foreign key (FRIEND_ID) references USERS (USER_ID) on delete cascade,
    constraint FK_FRIENDSHIP_USERID
        foreign key (USER_ID) references USERS (USER_ID) on delete cascade
);
DROP TABLE IF EXISTS REVIEWS CASCADE;
create table IF NOT EXISTS REVIEWS
(
    REVIEW_ID int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CONTENT VARCHAR NOT NULL,
    IS_POSITIVE boolean,
    USER_ID int NOT NULL,
    FILM_ID int NOT NULL,
    constraint REVIEWS_PK
        primary key (REVIEW_ID),
    constraint FK_REVIEWS_USER_ID
        foreign key (USER_ID) references USERS (USER_ID) on delete cascade,
    constraint FK_REVIEWS_FILM_ID
        foreign key (FILM_ID) references FILMS (FILM_ID) on delete cascade
);
DROP TABLE IF EXISTS REVIEW_LIKES CASCADE;
create table IF NOT EXISTS REVIEW_LIKES
(
    REVIEW_ID int NOT NULL,
    USER_ID int NOT NULL,
    IS_USEFUL boolean,
    PRIMARY KEY(REVIEW_ID, USER_ID),
    constraint FK_REVIEW_LIKES_USER_ID
        foreign key (USER_ID) references USERS (USER_ID) on delete cascade,
    constraint FK_REVIEW_LIKES_REVIEW_ID
        foreign key (REVIEW_ID) references REVIEWS (REVIEW_ID) on delete cascade
);
